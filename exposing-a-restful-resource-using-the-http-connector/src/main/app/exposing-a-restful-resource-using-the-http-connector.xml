<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" 
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
	xmlns:httpn="http://www.mulesoft.org/schema/mule/httpn" 
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/httpn http://www.mulesoft.org/schema/mule/httpn/current/mule-httpn.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">

	<spring:beans>
        <spring:bean class="java.util.HashMap" id="personDataStore" name="personDataStore" scope="singleton"/>
        <spring:bean class="java.util.concurrent.atomic.AtomicInteger" id="personId" name="personId" scope="singleton"/>
    </spring:beans>
    
    <httpn:listener-config name="HTTP" doc:name="HTTP Listener config">
        <httpn:listener-connection host="0.0.0.0" port="8081"/>
    </httpn:listener-config>

    <flow name="retrieveAllPersonsFlow">
        <httpn:listener config-ref="HTTP" path="/person" doc:name="HTTP (Retrieve all persons)" allowedMethods="GET"/>
        <set-payload value="#[app.registry.'personDataStore'.values()]" doc:name="Set payload with all persons"/>
        <json:object-to-json-transformer doc:name="Convert person list to JSON"/>
        <logger message="Port: ${http.port}" level="INFO" doc:name="Logger"/>
    </flow>
    
    <flow name="storePersonFlow">
        <httpn:listener config-ref="HTTP" path="/person" doc:name="HTTP (Store person)" allowedMethods="POST">
            <httpn:response-builder statusCode="201">
                <httpn:headers>
                    <httpn:header key="Location" value="http://0.0.0.0:8081/person/"/>
                </httpn:headers>
            </httpn:response-builder>
        </httpn:listener>
        <json:json-to-object-transformer doc:name="Convert to person object" returnClass="org.mule.examples.Person"/>
        <set-variable doc:name="Lookup next person id" value="#[app.registry.'personId'.incrementAndGet()]" variableName="personId"/>
        <expression-component doc:name="Store person"><![CDATA[app.registry.'personDataStore'.put(personId, payload);]]></expression-component>
    	<set-payload doc:name="Set success response" value="{ &quot;status&quot;: &quot;success&quot;, &quot;statusDescription&quot;: &quot;person created successfully&quot;}"/>
    </flow>
    <flow name="retrievePersonFlow">
        <httpn:listener config-ref="HTTP" path="/person/{personId}" allowedMethods="GET" doc:name="HTTP (Streaming)">
            <httpn:error-response-builder reasonPhrase="#[errorReasonPhrase]" statusCode="#[errorStatusCode]"/>
        </httpn:listener>
        <set-variable doc:name="Variable" value="#[Integer.valueOf(message.attributes.uriParams.personId)]" variableName="personId"/>
    	<logger doc:name="Logger" level="ERROR" message="Person id is #[personId]"/>         
    	<message-filter doc:name="Fail if person does not exists" throwOnUnaccepted="true">
            <expression-filter expression="#[app.registry.'personDataStore'.containsKey(personId)]"/>
        </message-filter>
        <set-payload doc:name="Lookup person and set as payload" value="#[app.registry.'personDataStore'.get(personId)]"/>
        <json:object-to-json-transformer doc:name="Convert person to JSON"/>
    </flow>
    
    
</mule>
